// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")

    // If you have enabled foreign key constraints for your database, remove this line.
    relationMode = "prisma"
}

model Book {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    chapters Chapter[]

    languageDepths LanguageDepth[]

    @@index([name])
    @@index([createdById])
}

model LanguageDepth {
    id        Int      @id @default(autoincrement())
    depth     Int
    name      String   @default("English")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    book Book @relation(fields: [bookId], references: [id])
    bookId Int

    language Language @relation(fields: [languageId], references: [id])
    languageId Int

    words WordLayer[]

    @@index([depth])
    @@index([bookId])
    @@index([languageId])
}

model Chapter {
    id        Int      @id @default(autoincrement())
    name      String
    number    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    book Book @relation(fields: [bookId], references: [id])
    bookId Int

    stanzas Stanza[]

    @@index([name])
    @@index([bookId])
}

model Stanza {
    id        Int      @id @default(autoincrement())
    number    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    chapter Chapter @relation(fields: [chapterId], references: [id])
    chapterId Int

    lines Line[]

    @@index([number])
    @@index([chapterId])
}

model Line {
    id        Int      @id @default(autoincrement())
    number    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    stanza Stanza @relation(fields: [stanzaId], references: [id])
    stanzaId Int

    words Word[]

    @@index([stanzaId])
}

model Word {
    id        Int      @id @default(autoincrement())
    number    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    line Line @relation(fields: [lineId], references: [id])
    lineId Int

    layers WordLayer[]

    @@index([lineId])
}

model WordLayer {
    id        Int      @id @default(autoincrement())
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    word Word @relation(fields: [wordId], references: [id])
    wordId Int

    languageDepth LanguageDepth @relation(fields: [languageDepthId], references: [id])
    languageDepthId Int

    @@index([wordId])
    @@index([text])
    @@index([languageDepthId])
}

model Language {
    id        Int      @id @default(autoincrement())
    name      String   @default("English")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    beginYearBP Int
    endYearBP   Int
    languageDepths LanguageDepth[]

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    books         Book[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
